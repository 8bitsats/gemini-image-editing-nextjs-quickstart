"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";
import { Github, Loader2, ExternalLink, GitBranch, GitCommit } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface DeploymentConfig {
  repoOwner: string;
  repoName: string;
  branch: string;
  commitMessage: string;
  files: { path: string; content: string }[];
}

export function GitHubDeployment() {
  const [config, setConfig] = useState<DeploymentConfig>({
    repoOwner: "",
    repoName: "",
    branch: "main",
    commitMessage: "Deploy from Gorbagana",
    files: [],
  });
  const [isDeploying, setIsDeploying] = useState(false);
  const [deploymentUrl, setDeploymentUrl] = useState("");
  const { toast } = useToast();

  const handleDeploy = async () => {
    if (!config.repoOwner || !config.repoName) {
      toast({
        title: "Error",
        description: "Please provide repository owner and name",
        variant: "destructive",
      });
      return;
    }

    setIsDeploying(true);
    setDeploymentUrl("");

    try {
      // This would typically call a backend API that uses GitHub API
      // For now, we'll create a deployment script that can be run locally
      const deploymentScript = generateDeploymentScript(config);
      
      // Download the deployment script
      const blob = new Blob([deploymentScript], { type: "text/plain" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "deploy-to-github.sh";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Deployment Script Generated",
        description: "Run the downloaded script to deploy to GitHub",
      });

      // Set the GitHub URL
      setDeploymentUrl(`https://github.com/${config.repoOwner}/${config.repoName}/tree/${config.branch}`);
    } catch (error) {
      toast({
        title: "Deployment Error",
        description: error instanceof Error ? error.message : "Failed to create deployment",
        variant: "destructive",
      });
    } finally {
      setIsDeploying(false);
    }
  };

  const generateDeploymentScript = (config: DeploymentConfig): string => {
    return `#!/bin/bash
# GitHub Deployment Script
# Generated by Gorbagana

# Configuration
REPO_OWNER="${config.repoOwner}"
REPO_NAME="${config.repoName}"
BRANCH="${config.branch}"
COMMIT_MESSAGE="${config.commitMessage}"

# Check if gh CLI is installed
if ! command -v gh &> /dev/null; then
    echo "GitHub CLI (gh) is not installed. Please install it first:"
    echo "https://cli.github.com/"
    exit 1
fi

# Clone or update repository
if [ -d "$REPO_NAME" ]; then
    echo "Updating existing repository..."
    cd "$REPO_NAME"
    git fetch origin
    git checkout $BRANCH
    git pull origin $BRANCH
else
    echo "Cloning repository..."
    gh repo clone "$REPO_OWNER/$REPO_NAME"
    cd "$REPO_NAME"
    git checkout $BRANCH
fi

# Create deployment branch
DEPLOY_BRANCH="gorbagana-deploy-$(date +%Y%m%d-%H%M%S)"
git checkout -b $DEPLOY_BRANCH

# Add your files here
# Example: cp -r ../your-files/* .

# Stage all changes
git add -A

# Commit changes
git commit -m "$COMMIT_MESSAGE"

# Push to GitHub
git push origin $DEPLOY_BRANCH

# Create pull request
gh pr create --title "$COMMIT_MESSAGE" --body "Automated deployment from Gorbagana" --base $BRANCH

echo "Deployment complete! Pull request created."
`;
  };

  const addFile = () => {
    setConfig({
      ...config,
      files: [...config.files, { path: "", content: "" }],
    });
  };

  const updateFile = (index: number, field: "path" | "content", value: string) => {
    const newFiles = [...config.files];
    newFiles[index][field] = value;
    setConfig({ ...config, files: newFiles });
  };

  const removeFile = (index: number) => {
    setConfig({
      ...config,
      files: config.files.filter((_, i) => i !== index),
    });
  };

  return (
    <Card className="p-6 space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-2 flex items-center gap-2">
          <Github className="h-5 w-5" />
          GitHub Deployment
        </h3>
        <p className="text-sm text-muted-foreground">
          Deploy your project to GitHub with automated scripts
        </p>
      </div>

      <div className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="repo-owner">Repository Owner</Label>
            <Input
              id="repo-owner"
              placeholder="username or organization"
              value={config.repoOwner}
              onChange={(e) => setConfig({ ...config, repoOwner: e.target.value })}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="repo-name">Repository Name</Label>
            <Input
              id="repo-name"
              placeholder="my-awesome-project"
              value={config.repoName}
              onChange={(e) => setConfig({ ...config, repoName: e.target.value })}
            />
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="branch">Target Branch</Label>
          <Select value={config.branch} onValueChange={(value) => setConfig({ ...config, branch: value })}>
            <SelectTrigger id="branch">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="main">main</SelectItem>
              <SelectItem value="master">master</SelectItem>
              <SelectItem value="develop">develop</SelectItem>
              <SelectItem value="staging">staging</SelectItem>
            </SelectContent>
          </Select>
        </div>

        <div className="space-y-2">
          <Label htmlFor="commit-message">Commit Message</Label>
          <Textarea
            id="commit-message"
            placeholder="Add new features and improvements"
            value={config.commitMessage}
            onChange={(e) => setConfig({ ...config, commitMessage: e.target.value })}
            className="min-h-[80px]"
          />
        </div>

        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <Label>Files to Deploy</Label>
            <Button variant="outline" size="sm" onClick={addFile}>
              Add File
            </Button>
          </div>

          {config.files.map((file, index) => (
            <div key={index} className="space-y-2 p-4 border rounded-lg">
              <div className="flex justify-between items-center">
                <Label>File {index + 1}</Label>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => removeFile(index)}
                >
                  Remove
                </Button>
              </div>
              <Input
                placeholder="path/to/file.js"
                value={file.path}
                onChange={(e) => updateFile(index, "path", e.target.value)}
              />
              <Textarea
                placeholder="File content..."
                value={file.content}
                onChange={(e) => updateFile(index, "content", e.target.value)}
                className="min-h-[100px] font-mono text-sm"
              />
            </div>
          ))}
        </div>

        <Button
          onClick={handleDeploy}
          disabled={isDeploying || !config.repoOwner || !config.repoName}
          className="w-full"
        >
          {isDeploying ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Generating Deployment Script...
            </>
          ) : (
            <>
              <GitCommit className="mr-2 h-4 w-4" />
              Generate Deployment Script
            </>
          )}
        </Button>

        {deploymentUrl && (
          <div className="p-4 bg-muted rounded-lg">
            <p className="text-sm font-medium mb-2">Repository URL:</p>
            <a
              href={deploymentUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="text-sm text-primary hover:underline flex items-center gap-1"
            >
              {deploymentUrl}
              <ExternalLink className="h-3 w-3" />
            </a>
          </div>
        )}
      </div>
    </Card>
  );
}